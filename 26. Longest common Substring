#include <bits/stdc++.h>
using namespace std;

//Intuition: Longest common substring
//Tabulation approach easy to solve is same as 'Longest common subsequence problem' => with slight modification change
//1) if (match) => dp[i][j] = 1+dp[i-1][j-1];   .....(same)
//2) if (notMached) => dp[i][j] = 0;   .....(slight change)
//3) return the maximum value from entire dp[][] table created => is our answer of longest common substring

class Solution
{
public:

    // Memoization approach : Time:O(n*m)  Space:O(n*m)+O(n+m) => dp space + rec stack space
    int memoize(vector<vector<int>> &dp,int i,int j,string str1, string str2)
    {
        //base case 
        if(i<0 || j<0)
        {
            return 0;
        }
        //pre checking the dp table 
        if(dp[i][j]!=-1)
        {
            return dp[i][j];
        }
        //store the ans in variable first by calling all 3 recc_calls => at end assign it to dp
        int ans = INT_MIN;
        //if matched => +1 to count length
        if(str1[i]==str2[j])
        {
            ans = 1+memoize(dp,i-1,j-1,str1,str2);
        }
        else //not matched => put 0 to length directly
        {
            ans = 0;
        }
        //call remaining 2 possible choices to find ans
        memoize(dp,i-1,j,str1,str2); //str1 shrinnk
        memoize(dp,i,j-1,str1,str2); //str2 is shrink
        return dp[i][j] = ans; //store the ans in dp at last
    }
    int longestCommonSubstr1 (string str1, string str2, int n, int m)
    {
        //memoization dp[n][m]
        vector<vector<int>> dp(n,vector<int>(m,-1));
        //call the memoiza function to fill up dp[][]
        memoize(dp,n-1,m-1,str1,str2); //call for last index of strings i.e. [n-1,m-1]
        //now iterate over the dp table to find largest length of substring
        int maxi = 0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(maxi<dp[i][j])
                {
                    maxi = dp[i][j];
                }
            }
        }
        return maxi;
    }

    // Tabulation : bottom up approach : move idx1 and idx2 from 0 to last index of strings
    //  Time:O(n*m)    Space:O(n*m)
    int longestCommonSubstr2 (string str1, string str2, int n, int m)
    {
        // using tabulation approach
        vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));
        // base case filling same as privious example
        for (int i = 0; i <= n; i++)
        {
            for (int j = 0; j <= m; j++)
            {
                if (i == 0 || j == 0)
                {
                    dp[i][j] = 0;
                }
            }
        }
        int maxi = 0;
        // filling remaining dp table
        for (int i = 1; i <= n; i++)
        {
            for (int j = 0; j <= m; j++)
            {
                // if matched => add 1 + call_recc(i-1,j-1)
                if (str1[i - 1] == str2[j - 1]) // shifted indexes in string and sp
                {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                    // during this processing only, find maximum and store it
                    maxi = max(maxi, dp[i][j]);
                }
                else // if (notMachted) => put 0 directly
                {
                    dp[i][j] = 0;
                }
            }
        }
        // taking the maximum from entire dp table => will be out longest common substring
        return maxi;
    }
};


int main()
{
    int n, m;
    cin >> n >> m;
    string s1, s2;
    cin >> s1 >> s2;
    Solution ob;

    cout <<"By Memoization: " << ob.longestCommonSubstr1(s1, s2, n, m) << endl;
    cout <<"By Tabulation: " << ob.longestCommonSubstr2(s1, s2, n, m) << endl;
}

/*
testcase:
Input: S1 = "ABCDGH", S2 = "ACDGHR", n = 6, m = 6
Output: 4
Explanation: The longest common substring is "CDGH" which has length 4.
*/
