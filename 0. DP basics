/*

Dynamic Programming (DP) => 
remember the past means store the overlapping subproblems ka result to use directly in future with save time 
2 Types to solve DP =>
1) Top to Bottom / Memoization => break larger problem into smaller subproblems and go till base case
2) bottom to Top / Tabulation => solve smallest subproblems first and storing&using their result try to solve larger problem
Every time declare the max size array/map to store the DP subproblem results

*/


# include <iostream>
#include <vector>
using namespace std;

//1) Using Reccursion => TC:O(2^n) SC:O(n)
int fib1(int n)
{
    //base case
    if(n<=1)
    {
        return n;
    }
    return fib1(n-1)+fib1(n-2);
}

//2) Memoization => top down approach => TC:O(n) SC:O(n)+O(n)=>dp[] space + rec. stack
int fib2(int n, vector<int>&dp)
{
    //base case
    if(n<=1)
    {
        return n;
    }
    //check if subproblem is already solved
    if(dp[n]!=-1)
    {
        return dp[n];
    }
    //still not solved subproblem
    return dp[n]= fib2(n-1,dp)+fib2(n-2,dp);
}

//3) Tabulation => bottom up approach => TC:O(n) SC:O(n)=>dp[] space only
int fib3(int n)
{
    //smallest subproblems solve and store first and use them further
    int dp1[n+1]={-1};
    dp1[0] = 0;
    dp1[1] = 1;
    if(n<=1)
    {
        return n;
    }
    //to solve larger problems use above smaller results
    for(int i=2;i<=n;i++)
    {
        dp1[i] = dp1[i-1]+dp1[i-2];
    }
    return dp1[n];
}

//4) space optimization way
int fib4(int n)
{
    int a = 0;
    int b = 1;
    if(n<=1)
    {
        return n;
    }
    for(int i=2;i<=n;i++)
    {
        int c=a+b;
        a=b;
        b=c;
    }
    return b;
}

int main()
{
    int n=5;
    vector<int> dp(n+1,-1);
    cout<<"By Reccursion "<<fib1(5)<<endl;
    cout<<"By Memoization "<<fib2(5,dp)<<endl;
    cout<<"By Tabulation "<<fib3(5)<<endl;
    cout<<"By Optimization "<<fib4(5)<<endl;
    return 0;
}
