#include <bits/stdc++.h>
using namespace std;

// we can move down or digonal only from any cell and want to reach last row with min path cost
// Intuition : 
// for reccursion & memoization => use top-down approach means call from (0,0) to last(n-1) row recc calls
// will start calls from [0,0] and try to reach any cell of last row => as here destination cell is not fixed hence we doing this
// for tabulation will be bottom up approach => start from last row and for each row go left to right direction
// will start form last cell of last row and making exact opposite direction mme calls try to fill dp table

class Solution
{
public:
    //-------------------------Simple reccurance relation--------------------------------------//
    // for reccursion & memoization => use top-down approach means call from (0,0) to last(n-1) row recc calls
    // Time : O(2^(n*n)) approx exponential          space : O(n) + O(n*n) => O(length of path) + O(recc stack space)
    int recc(int i, int j, vector<vector<int>> &triangle, int n)
    {
        // base case
        if (i == n - 1) // reached our goal last row => return its value to add in our resultant path
        {
            return triangle[n - 1][j];
        }
        // now for reccursion moves from each cell
        //  add currPath value and call for next cell ke move ke pathValue liye
        int down = triangle[i][j] + recc(i + 1, j, triangle, n);
        int digonal = triangle[i][j] + recc(i + 1, j + 1, triangle, n);

        return min(down, digonal); // return min of both paths found
    }
    int minimizeSum1(int n, vector<vector<int>> &triangle)
    {
        return recc(0, 0, triangle, n); // initial call with [0,0] cell ****** VVIMP
    }

    //-----------------------------Memoization: top-down approach------------------------------------------//
    // for reccursion & memoization => use top-down approach means call from (0,0) to last(n-1) row recc calls
    // Time : O(n*n) polynomial      Space: O(n)+O(n*n) ==> rec_stack spacce + dp matrix space
    int memoize(int i, int j, vector<vector<int>> &triangle, int n, vector<vector<int>> &dp)
    {
        // base case
        if (i == n - 1) // reached our goal last row => return its value to add in our resultant path
        {
            return triangle[n - 1][j];
        }
        // firstly checking dp for results
        if (dp[i][j] != -1)
        {
            return dp[i][j];
        }
        // now for reccursion moves from each cell
        //  add currPath value and call for next cell ke move ke pathValue liye
        int down = triangle[i][j] + memoize(i + 1, j, triangle, n, dp);
        int digonal = triangle[i][j] + memoize(i + 1, j + 1, triangle, n, dp);

        return dp[i][j] = min(down, digonal); // return min of both paths found
    }

    int minimizeSum2(int n, vector<vector<int>> &triangle)
    {
        vector<vector<int>> dp(n, vector<int>(n, -1)); // 2D dp grid for memoization
        return memoize(0, 0, triangle, n, dp);         // initial call with [0,0] cell  *** IMP to first call (0,0) 
    }

    //---------------------------------Tabulation: bottom up approach------------------------------------------//
    // for tabulation will be bottom up approach => start from last row and for each row go left to right direction
    // Time : O(n*n)     Space: O(n*n)  => only dp table ki space required
    int minimizeSum3(int n, vector<vector<int>>& triangle) {
        vector<vector<int>> dp(n,vector<int> (n,-1)); //2D dp grid for tabulation
        //now initially fill up the dp table with base case
        //means fill up the last row with grid values given already
        for(int j=0;j<n;j++)
        {
            dp[n-1][j] = triangle[n-1][j]; //last row processing done
        }
        //now start filling the dp table by moving from bottom to top row and left to right direction in each row
        for(int i=n-2;i>=0;i--) //starting from second last row
        {
            //as triangle matrix hai => each row me cells will be equal to row number
            for(int j=i;j>=0;j--) //for each row start with last cell and move back one-one col
            {
                int down = triangle[i][j] + dp[i+1][j]; 
                int digonal = triangle[i][j] + dp[i+1][j+1];
                //store the minimum of path result found into dp table
                dp[i][j] = min(down,digonal);
            }
        }
        //at end our result will be to reach [0,0] from last row just return it
        return dp[0][0];
    }

    //------------------------------------Space optimization------------------------------------------------//
    // we will use the front[] as 1D array to store the next row ke results found already like in tabulation approach same
    // we will maintain the curr[] as 1D dp to find current row ke results using front[] ke results those are already found
    int minimizeSum4(int n, vector<vector<int>>& triangle) 
    {
        //1D dp grid for tabulation
        vector<int> front(n,0); //0 se initialize karke rakho => fill up results of next row so can used to find curr_row ke results
        //now initially fill up the dp table with base case,  means fill up front[] with the last row with grid values given already
        for(int j=0;j<n;j++)
        {
            front[j] = triangle[n-1][j]; //last row processing done and stored as is into front[]
        }
        //now start filling the curr[] 1D dp by moving from bottom to top row and left to right direction in each row
        for(int i=n-2;i>=0;i--) //starting from second last row
        {
            vector<int> curr(n,0); //now for each row processing will have curr[] dp to store curr row ke results using front[] row ke results
            //as triangle matrix hai => each row me cells will be equal to row number i.e. (i) here
            for(int j=i;j>=0;j--) //for each row start with last cell and move back one-one col
            {
                //front[] 1D dp me required results hai => wo use karo to fill curr[] 1D dp
                int down = triangle[i][j] + front[j]; 
                int digonal = triangle[i][j] + front[j+1];
                //store the minimum of path result found into curr[] 1D dp 
                curr[j] = min(down,digonal);
            }
            // *** IMP =>copy back curr[] 1D dp into front[] for further processing
            front = curr ;
        }
        //at end our result will be to reach [0,0] from last row just return 
        //it is now present in front[0] me
        return front[0];
    }

};

// Driver Code Starts.
int main()
{

    int n;
    cin >> n;
    vector<vector<int>> triangle;

    for (int i = 0; i < n; i++)
    {
        vector<int> temp;
        for (int j = 0; j <= i; j++)
        {
            int x;
            cin >> x;
            temp.push_back(x);
        }
        triangle.push_back(temp);
    }
    Solution obj;
    cout << "Simple Reccursion: " << obj.minimizeSum1(n, triangle) << "\n";
    cout << "Memoization: " << obj.minimizeSum2(n, triangle) << "\n";
    cout << "Tabulation: " << obj.minimizeSum3(n, triangle) << "\n";
    cout << "Space Optimization: " << obj.minimizeSum4(n, triangle) << "\n";

    return 0;
}

/*
testcase:
n=4

    2
   3 4
  6 5 7
 4 1 8 3

output : 11

*/
