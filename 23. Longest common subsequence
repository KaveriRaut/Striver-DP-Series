#include <bits/stdc++.h>
const int mod = 1e9 + 7;
using namespace std;

// Intuition: DP on strings
//  In order to find the subsequence and compare one by one character and return +1 count as if match happen
//  Here we check all the subsequences possible and find Longest Common Subsequence out of them
//  1) keep index in rec_fun(idx1,idx2) => for 2strings seperate
//  2) if (letters of both strings Matched) => rturn (+1 add LCS) + call recc with move both idx
//  3) else if (letters Not-Matched) => take max( try to move only idx1, try to move only idx2 ); //take max out of them both and return that

// function to find longest common subsequence
class Solution
{
public:
    // Recursion :  Time:O(2^n)*O(2^m) ~ exponential    Space:O(n+m)
    int recc(int idx1, int idx2, string str1, string str2)
    {
        // base case
        if (idx1 < 0 || idx2 < 0)
        {
            return 0;
        }
        // matched or notMatched
        if (str1[idx1] == str2[idx2])
        {
            return 1 + recc(idx1 - 1, idx2 - 1, str1, str2);
        }
        else
        {
            return max(recc(idx1 - 1, idx2, str1, str2), recc(idx1, idx2 - 1, str1, str2));
        }
    }
    // Function to find the length of longest common subsequence in two strings.
    int lcs(int n, int m, string str1, string str2)
    {
        return recc(n - 1, m - 1, str1, str2);
    }

    // memoization : Time:O(n*m)     space:O(n*m)+O(n+m)=>dp space + rec-stack space
    int memo(int idx1, int idx2, string str1, string str2, vector<vector<int>> &dp)
    {
        // base case
        if (idx1 < 0 || idx2 < 0)
        {
            return 0;
        }
        // pre checking the dp
        if (dp[idx1][idx2] != -1)
        {
            return dp[idx1][idx2];
        }
        // matched or notMatched
        if (str1[idx1] == str2[idx2])
        {
            return dp[idx1][idx2] = 1 + memo(idx1 - 1, idx2 - 1, str1, str2, dp);
        }
        else
        {
            return dp[idx1][idx2] = max(memo(idx1 - 1, idx2, str1, str2, dp), memo(idx1, idx2 - 1, str1, str2, dp));
        }
    }
    int lcs2(int n, int m, string str1, string str2)
    {
        vector<vector<int>> dp(n, vector<int>(m, -1)); // memoization dp[n][m]
        return memo(n - 1, m - 1, str1, str2, dp);
    }

    // Tabulation : bottom up approach : move idx1 and idx2 from 0 to last index of strings
    //  Time:O(n*m)    Space:O(n*m)
    //--------------------Shifting of index to right so negative idx handled---------------------------//
    // Tabulation => have to handle the base case using the negative index to stop i.e. at idx==-1 it returns
    // we cant have negative index in tabulation to work with => hance we have to do shifting of indexes to rigght by 1
    // means for strings indexing will consider current fun(i,j) as fun(i-1,j-1) now onwards;
    // but in dp[][] matrix will use the indexes as per decided priviously (i,j) only
    // after shifting => if (i<0) i.e. i==-1 will be now (i==0)
    // for this we need to have dp[n+1][m+1] but initial call will be made as fun(n,m) instead of general fun(n-1,m-1)
    int lcs3(int n, int m, string str1, string str2)
    {
        // 1) declare dp[n+1][m+1] considering shifting
        vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0)); // tabulation dp[n+1][m+1]={0}  //*****size
        // 2) fill dp with shifted base case
        // before shift base case => if(i<0 || j<0) means indirectly->if(i==-1 || j==-1) return 0;
        // after shifting index to 1 right => if(i<1 || j<1) means indirectly if(i==0 || j==0) return 0;
        // means at (i==0) || (j==0) -> entire row and col will have 0
        for (int j = 0; j <= m; j++) // if(i==0) put 0 whatever j is
            dp[0][j] = 0;
        for (int i = 0; i <= n; i++) // if (j==0) put 0 whatever i is
            dp[i][0] = 0;
        // 3) fill up remaining dp table for i=1 to n and j=1 to m
        for (int i = 1; i <= n; i++)
        {
            for (int j = 1; j <= m; j++)
            {
                // here copy the recurrance as it is
                // only remember => we want to access original char at (i,j) but due to right shift this will modify to (i-1,j-1)
                // if(str1[i]==str2[j])
                if (str1[i - 1] == str2[j - 1]) // *****string me 'char' find karne me shifted index use karenge => dp me nhi karenge usse use
                {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                }
                else
                {
                    dp[i][j] = 0 + max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        return dp[n][m]; // due to right shift --> actually we wanna call dp[n-1][m-1]; but will call dp[n+1][m+1]
    }

    // Space Optimization : Time:O(n*m)   Space:O(m)=>only 1D array for space
    // Everything including right shifting of indexes was handled in 'Tabulation' approach
    // so for 'space optimization' approach we just need to substitute prev==dp[i-1] and curr==dp[i] thats it.
    int lcs4(int n, int m, string str1, string str2)
    {
        // 1) declare prev[m+1] and curr[m+1] => and only modify the tabulation
        vector<int> prev(m + 1, 0); // optimization prev[m+1]={0}
        vector<int> curr(m + 1, 0);
        // 2) fill dp with shifted base case => only modify the tabulation
        // here we will have only single row of prev[m+1] => only changing (j) wali base case likhenge hum
        for (int j = 0; j <= m; j++)
        {
            prev[j] = 0;
        }
        // 3) fill up remaining dp table for i=1 to n and j=1 to m
        //  substitute dp[i]==curr ,,, dp[i-1]===prev
        for (int i = 1; i <= n; i++)
        {
            for (int j = 1; j <= m; j++)
            {
                // here copy the recurrance as it is
                // only remember => we want to access original char at (i,j) but due to right shift this will modify to (i-1,j-1)
                // if(str1[i]==str2[j])
                if (str1[i - 1] == str2[j - 1])
                {
                    curr[j] = 1 + prev[j - 1];
                }
                else
                {
                    curr[j] = 0 + max(prev[j], curr[j - 1]);
                }
            }
            prev = curr; /// copy back is VVIMP ******
        }
        return prev[m]; // due to right shift --> actually we wanna call dp[n-1][m-1]; but will call dp[n+1][m+1]
    }
};

// Driver Code Starts.
int main()
{
    int n, k, x, y;
    cin >> x >> y; // Take size of both the strings as input
    string s1, s2;
    cin >> s1 >> s2; // Take both the string as input
    Solution ob;
    cout << "Recursion: " << ob.lcs(x, y, s1, s2) << endl;
    cout << "Memoization: " << ob.lcs2(x, y, s1, s2) << endl;
    cout << "Tabulation: " << ob.lcs3(x, y, s1, s2) << endl;
    cout << "Space optimization: " << ob.lcs4(x, y, s1, s2) << endl;
    return 0;
}

/*
Testcase:
A = 6, B = 6
str1 = ABCDGH
str2 = AEDFHR
Output: 3
*/
