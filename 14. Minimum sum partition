#include <bits/stdc++.h>
using namespace std;

// Intuition: exteded problem of DP14 => tabulation method
// follow the tabulation method to create DP table from DP14 lecture
// from DP[n][total_sum+1] => we find which target can be reached from 0 to total_sum
// after creating the DP => additional step is to iterate over the last row of DP and check which target is true means can be achieve
// if dp is true => subset1 ki sum we got from dp, subset2 ki sum will be (total_sum-subset1 ki sum)
// find the difference and its min-diff have to store and return

class Solution
{
    
public:

    // Tabulation method : Time:O(n*target)   Space:O(n*target)
    int minDifference(int arr[], int n)
    {
        int totalSum = 0;
        for (int i = 0; i < n; i++)
        {
            totalSum += arr[i];
        }
        // create the dp[n][totalSum]
        vector<vector<bool>> dp(n, vector<bool>(totalSum, 0));
        // fill up dp with base case
        // if target==0 => all index are true
        for (int idx = 0; idx < n; idx++)
        {
            dp[idx][0] = true;
        }
        // if idx==0 => put true at arr[0]==target
        dp[0][arr[0]] = true;
        // now reccursion from index=1 to n
        for (int idx = 1; idx < n; idx++)
        {
            for (int target = 0; target <= totalSum; target++)
            {
                int notpick = dp[idx - 1][target];
                int pick = false;
                if (target >= arr[idx])
                {
                    pick = dp[idx - 1][target - arr[idx]];
                }
                dp[idx][target] = (pick | notpick);
            }
        }
        // now our dp is created //extra processing on dp[][] for min-diff finding
        int mini_diff = INT_MAX;
        for (int target = 0; target <= totalSum; target++)
        {
            // iterate on last row of dp[][] => if true to get target => find minimum diff between (subset1 and 2 ka sum)
            if (dp[n - 1][target] == true)
            {
                int subset1 = target;
                int subset2 = totalSum - target;
                mini_diff = min(mini_diff, abs(subset1 - subset2));
            }
        }
        return mini_diff;
    }
};

// Driver Code Starts
int main()
{
    int n;
    cin >> n;
    int a[n];
    for (int i = 0; i < n; i++)
        cin >> a[i];
    Solution ob;
    cout<< "minimum difference between 2 subsets: " << ob.minDifference(a, n) << "\n";

    return 0;
}

/*
testcase: 
Input: N = 4, arr[] = {1, 6, 11, 5} 
Output: 1
Input: N = 4, arr[] = {1, 2,3,4} 
Output: 0
*/
