#include <bits/stdc++.h>
using namespace std;

// Longest Palindrome of given string : this problem is completly based on LCS problem DP25
// Intuition:
// if we have longest palindromic subsequence (x) in string str and
// if we reverse the entire string str => then also that palindromin subsequence(x) will be in same sequence as it is palindrome
// reverse of it is same as of previous.
//**** so in-short we have to find the longest subsequence from string str and reverse of str => simply it will give us the longest palindrom possible in str

class Solution
{
public:

    // LCS : longest common subsequence between 2 strings
    // Using tabulation method of LCS :  Time:O(n*m)   Space:O(n*m)+O(n+m)
    // we can use any one of method to get LCS
    int tabulation_LCS(int n, int m, string str1, string str2)
    {
        // dp for tabulation store
        vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0)); // size id [n+1][m+1] as we have shifted the indexes to right
        // base case
        for (int i = 0; i <= n; i++)
        {
            for (int j = 0; j <= m; j++)
            {
                if (i == 0 || j == 0)
                    dp[i][j] = 0;
            }
        }
        // traverse and fillup remaining dp
        for (int N = 1; N <= n; N++)
        {
            for (int M = 1; M <= m; M++)
            {
                // if matched
                if (str1[N - 1] == str2[M - 1])
                {
                    dp[N][M] = 1 + dp[N - 1][M - 1]; // srink both strings with indexes-1
                }
                else // if not matched => take max_of((shrink 1st string i-1),(shrink 2nd string j-1))
                {
                    dp[N][M] = 0 + max(dp[N - 1][M], dp[N][M - 1]);
                }
            }
        }
        // dp with LCS created successfully => dp[n][m] will give the length of LCS
        return dp[n][m];
    }

    // function to initial setup => and to call for LCS function again
    int longestPalinSubseq(string str)
    {
        int n = str.size();
        // longest subsequence from string str and reverse of str => simply it will give us the longest palindrom possible in str
        string rev_str = ""; // reverse of string str => i.e. rev_str
        for (int i = n - 1; i >= 0; i--)
        {
            rev_str += str[i];
        }
        return tabulation_LCS(n, n, str, rev_str);
    }
};

// Driver Code Starts.
int main()
{
    string s;
    cin >> s;
    Solution ob;
    cout << ob.longestPalinSubseq(s) << endl;
    return 0;
}

/*
testcase:
Input:
S = "bbabcbcab"
Output: 7
Explanation: Subsequence "babcbab" is the longest subsequence which is also a palindrome.
*/
