#include <bits/stdc++.h>
using namespace std;

// DP on subsequences/subsets
// Intuition : 
// 1. express as indexes => reccFunc(idx,target) => shows that, is there exists target sum till index (idx) in array
// 2. find all the possibilities on those indexes => for each index we have 2 choices
//      a. Not Pick (arr[idx]) => call for remaining array + keep target as is => reccFunc(idx-1,target);
//      b. Pick (arr[idx]) => call for remaining array + decrease target by arr[idx] => reccFunc(idx-1,target-arr[idx]);
// 3. return true if anyone of Pick|notPick is true
// 4. base case will be : if(target==0) return true;
//                        if(idx==0 and arr[0]==target) return true; else return fasle; 

class Solution
{
public:

    //-------------------------Simple reccurance relation--------------------------------------//
    // reccursion with top-down approach means start with last index [n-1] and try to reach 1st index [0] with target
    // Simple reccursive algorithm => Time:O(2^(n)) exponential   Space:O(n)->recc stack space
    bool reccFunc(vector<int> arr, int idx, int target)
    {
        // base case
        if (target == 0) // got the target value => return true
        {
            return true;
        }
        if (idx == 0) // check last element gives target or not
        {
            if (arr[idx] == target) // last element is target => return true;
                return true;
            else
                return false; // not possible to get target => return false;
        }

        // reccursion for each idx => pick or notpick possibility
        bool notPick = reccFunc(arr, idx - 1, target); // target remain same, idx shift to idx-1
        bool Pick = false;                             // false initially
        if (target >= arr[idx])                        // check isValide to subtract the target from currElement
        {
            Pick = reccFunc(arr, idx - 1, target - arr[idx]); // decrease the target by currElement value
        }

        return (Pick | notPick); // return true if anyone of Pick or notPick is true;
    }

    bool isSubsetSum1(vector<int> arr, int target)
    {
        int n = arr.size();
        return reccFunc(arr, n - 1, target); // call for last idx and target
    }

    // Memoization (top-down approach) => Time:O(n*target)    Space:O(n*target)+O(n)->dp space+recc stack space
    // going from cell of [n-1]th index to any cell from [0]th index

    bool memoize(vector<int>arr,int idx,int target,vector<vector<int>> &dp)
    {
        //base case
        if(target==0) //got the target value => return true
        {
            return true;
        }
        if(idx==0) //check last element gives target or not
        {
            if(arr[idx]==target) //last element is target => return true;
                return true;
            else
                return false; //not possible to get target => return false;
        }
        
        //dp checking condition in memoization
        if(dp[idx][target] != -1)
        {
            return dp[idx][target];
        }
        
        //reccursion for each idx => pick or notpick possibility
        bool notPick = memoize(arr,idx-1,target,dp); //target remain same, idx shift to idx-1
        bool Pick = false; //false initially 
        if(target>=arr[idx]) //check isValide to subtract the target from currElement
        {
            Pick = memoize(arr,idx-1,target-arr[idx],dp); //decrease the target by currElement value
        }
        
        return dp[idx][target]=(Pick | notPick); //return true if anyone of Pick or notPick is true;
    }

    bool isSubsetSum2(vector<int>arr, int target){
        int n = arr.size();
        vector<vector<int>> dp(n+1, vector<int>(target+1, -1)); //dp[n+1][target+1]
        return memoize(arr,n-1,target,dp); //call for last idx (n-1) and target
    }

    // Tabulation (bottom-up approach) => Time:O(n*target)    Space:O(n*target)->only dp space
    // now here we fill the dp table in opposite manner than the memoization way
    // we will fill the 0th index first and then using those results will try to find next index ke results
    // going filling from 0th index ka 0 target to (n-1)th index ka any target
    bool isSubsetSum3(vector<int>arr, int target){
        int n = arr.size();
        vector<vector<bool>> dp(n+1, vector<bool>(target+1, 0)); //dp[n+1][target+1]
        
        //base case to fill the dp table => take help of reccurance relation
        //1st base case => for every index=[idx] at target=0 => return true
        for(int idx=0;idx<=n;idx++)
        {
            dp[idx][0] = true;
        }
        //2nd base case => at index (idx==0) => if target is at arr[0] is present ==> then only return true;
        dp[0][arr[0]] = true;//only on idx=0 of array you can form target arr[0]
        
        //index 0 already processed   //target 0 already processed
        //for furthur processing of all the indexes from 1st to last
        for(int idx=1;idx<n;idx++)
        {
            for(int targetSum=1;targetSum<=target;targetSum++)
            {
                bool notPick = dp[idx-1][targetSum];
                bool pick = false;
                if(targetSum>=arr[idx])
                {
                    pick = dp[idx-1][targetSum-arr[idx]];
                }
                dp[idx][targetSum] = (notPick | pick);
            }
        }
        
        return dp[n-1][target]; //call for last idx and target
    }


    // Space Optimization (bottom-up approach) => Time:O(n*target)    Space:O(target+1)->only 1D array space
    // here we require only single 1D array of previous row ke result ka.
    // and current row ke liye temp 1D array create karo using that previous single array and at end of processing the current row ...
    // just copy back the temp arr into previous array
    // for bottom-up approach we will move from 0th row to last [n-1]th row
    bool isSubsetSum4(vector<int>arr, int target){
        int n = arr.size();
        vector<bool> prev(target+1, 0); //prev dp[target+1] => storing result of previous row
        vector<bool> curr(target+1, 0); //curr dp[target+1] => finding the result of curr_row
        //base case to fill the dp table => take help of reccurance relation
        //1st base case => for every everyone target=0 is to be true
        prev[0] = true;
        curr[0] = true;
        //2nd base case => at index prev[arr[0]] => if target is at arr[0] is present ==> then only return true;
        prev[arr[0]] = true;//only on idx=arr[0] of prev array you can form target arr[0]
        
        //index 0 already processed   //target 0 already processed
        //for furthur processing of all the indexes from 1st to last ==> dp[idx]==prev now
        for(int idx=1;idx<n;idx++)
        {
            for(int targetSum=1;targetSum<=target;targetSum++)
            {
                bool notPick = prev[targetSum];
                bool pick = false;
                if(targetSum>=arr[idx])
                {
                    pick = prev[targetSum-arr[idx]];
                }
                curr[targetSum] = (notPick | pick);
            }
            //copy back IMP
            prev = curr;
        }
        
        return prev[target]; //call for last idx and target
    }

};

// Driver Code Starts.
int main()
{
    int N, sum;
    cin >> N;
    vector<int> arr(N);
    for (int i = 0; i < N; i++)
    {
        cin >> arr[i];
    }
    cin >> sum;

    Solution ob;
    cout << "Simple Reccursion: " << ob.isSubsetSum1(arr, sum) << endl;
    cout << "Memoization: " << ob.isSubsetSum2(arr, sum) << endl;
    cout << "Tabulation: " << ob.isSubsetSum3(arr, sum) << endl;
    cout << "Space optimization: " << ob.isSubsetSum4(arr, sum) << endl;

    return 0;
}
/*
testcase: 
N = 6
arr[] = {3, 34, 4, 12, 5, 2}
sum = 9
Output: 1 
*/
